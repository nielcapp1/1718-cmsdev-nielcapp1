<?php

/**
 * @file
 * Contains chaudfontaine.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function chaudfontaine_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the chaudfontaine module.
    case 'help.page.chaudfontaine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The original Chaudfontaine module!') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function chaudfontaine_theme() {
  return [
    'chaudfontaine' => [
      'render element' => 'children',
    ],
  ];
}

// function chaudfontaine_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
//   // Only do the extra work if the component is configured to be displayed.
//   // This assumes a 'mymodule_addition' extra field has been defined for the
//   // entity bundle in hook_entity_extra_field_info().
//     // if($view_mode == "full");
//     $build['amount_viewed'] = [
//       '#markup' => "Deze node werd x aantal keer bekeken.",
//     ];
// }

// function chaudfontaine_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
//   // This example hook implementation keeps track of the number of times a user
//   // has viewed a specific node during their current session. Then displays that
//   // information for them when they view a node.
//   //
//   // In addition, a hook is invoked that allows other modules to react when the
//   // page view count is updated.
//   //
//   // Retrieve the active session from the current request object.
//   $session = \Drupal::request()->getSession();
//   $current_counts = $session->get('chaudfontaine.view_counts', [
    
//   ]);
//   if (!isset($current_counts[$entity->id()])) {
    
//     // If this is the first time they've viewed the page we need to start the
//     // counter.
//     $current_counts[$entity->id()] = 1;
//   }
//   else {
    
//     // If they have already viewed this page just increment the existing
//     // counter.
//     $current_counts[$entity->id()]++;
//   }
  
//   // Save the updated values.
//   $session->set('chaudfontaine.view_counts', $current_counts);
  
//   // Invoke a hook to alert other modules that the count was updated.
//   //
//   // Hooks are invoked via the `module_handler` service. Which is an instance of
//   // \Drupal\Core\Extension\ModuleHandlerInterface.
//   //
//   // Hooks can be invoked in a few different ways:
//   // - All at once using ModuleHandlerInterface::invokeAll() to call all
//   //   implementations of the specified hook provided by any enabled module.
//   // - One at a time using ModuleHandlerInterface::invoke() to call only the
//   //   the specified module's implementation of a hook.
//   // - Using ModuleHandlerInterface::alter() to pass alterable variables to
//   //   hook_TYPE_alter() implementations for all enabled modules. This method
//   //   should be used for instances where the calling module has assembled data
//   //   and would like to give other modules an opportunity to alter that data
//   //   before it's used. A common pattern is to use invokeAll() to first gather
//   //   input from other modules, the immediately afterwards call alter() to give
//   //   modules the opportunity to alter the aggregate data.
//   $module_handler = \Drupal::moduleHandler();
  
//   // Calling \Drupal\Core\Extension\ModuleHandlerInterface::invokeAll() will
//   // call implementations of the hook in question for all enabled modules. The
//   // method takes two arguments. The name of the hook to invoke, and an optional
//   // array of arguments to pass to any functions implementing the hook.
//   //
//   // Hook names need to be unique. So when defining a new hook in your module it
//   // is customary to prefix the hook name with the short name of your module
//   // followed by the descriptive name of the hook itself. Because hooks names
//   // are also PHP function names they should contain only lowercase alphanumeric
//   // characters and underscores.
//   //
//   // The hook name parameter should have the "hook_" prefix removed. So if you
//   // want to invoke hook_mymodule_do_something() the value used here would be
//   // 'mymodule_do_something'.
//   //
//   // Hook implementations can optionally return a value, depending on the hook
//   // definition. If they do, the invokeAll() method aggregates the responses
//   // from all hooks in an array and returns the array.
//   //
//   // In this example we're invoking hook_hooks_example_count_incremented() and
//   // passing all implementations the current view count for the node, and the
//   // node object itself.
//   $module_handler->invokeAll('chaudfontaine_count_incremented', [
//     $current_counts[$entity->id()],
//     $entity,
//   ]);
  
//   // Display the current number of pages the user has viewed along with the
//   // node's content.
//   $build['view_count'] = [
//     '#markup' => '<p>' . t('Deze node werd @total keer bekeken tijdens deze sessie.', [
//       '@total' => $current_counts[$entity->id()],
//     ]) . '</p>',
//     // In order for this example to work we disable caching for the content of
//     // this node completely. This ensures that our hook is called every time the
//     // node is viewed instead of using a cached version of the page for
//     // subsequent requests.
//     '#cache' => [
//       'max-age' => 0,
//     ],
//   ];
// }

// function chaudfontaine_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//   if (isset($form['type']) && $form['type']['#value'] . '_node_settings' == $form_id) {
//     $upload_enabled_types = \Drupal::config('mymodule.settings')->get('upload_enabled_types');
//     $form['workflow']['upload_' . $form['type']['#value']] = [
//       '#type' => 'radios',
//       '#title' => t('Attachments'),
//       '#default_value' => in_array($form['type']['#value'], $upload_enabled_types) ? 1 : 0,
//       '#options' => [
//         t('Disabled'),
//         t('Enabled'),
//       ],
//     ];
    
//     // Add a custom submit handler to save the array of types back to the config file.
//     $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';
//   }
// }